{"ast":null,"code":"import axios from \"axios\";\nimport jwt from 'jwt-decode';\nconst API_URL = \"http://localhost:8080\";\nexport const login = (username, password) => {\n  return axios.post(API_URL + \"/authenticate\", {\n    username,\n    password\n  }).then(response => {\n    if (response.data.token) {\n      localStorage.setItem(\"user\", JSON.stringify(jwt(response.data.token)));\n      localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n    }\n\n    return JSON.parse(localStorage.getItem('user'));\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n};\nexport const register = (username, email, password) => {\n  return axios.post(API_URL + \"/register\", {\n    username,\n    email,\n    password\n  });\n};\nexport const getUsers = () => {\n  return axios.get(API_URL + '/users', {\n    headers: authHeader()\n  });\n};\nexport const makeAdmin = () => {\n  return axios.post(API_URL + '/makeAdmin', {\n    headers: authHeader()\n  }); // FIXME: necesita un /id para identificar el usuario\n};\nexport const updateUser = () => {\n  return axios.post(API_URL + '/user', {\n    headers: authHeader()\n  }); // FIXME: necesita un /id para identificar el usuario\n};\nexport const getUser = () => {\n  return axios.get(API_URL + '/user', {\n    headers: authHeader()\n  }); // FIXME: necesita un /id para identificar el usuario\n};\nexport const authHeader = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return {\n      Authorization: 'Bearer ' + user.accessToken\n    };\n  } else {\n    return {};\n  }\n};","map":{"version":3,"sources":["/Users/nicolaspavon/Desktop/ReposFacu/seguridadFE/src/Utils/api.js"],"names":["axios","jwt","API_URL","login","username","password","post","then","response","data","token","localStorage","setItem","JSON","stringify","parse","getItem","logout","removeItem","register","email","getUsers","get","headers","authHeader","makeAdmin","updateUser","getUser","user","accessToken","Authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC5C,SAAOL,KAAK,CAACM,IAAN,CAAWJ,OAAO,GAAG,eAArB,EAAsC;AAAEE,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAtC,EACLE,IADK,CACCC,QAAD,IAAc;AACnB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAlB,EAAyB;AACxBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeb,GAAG,CAACO,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAlB,CAA7B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACC,IAAT,CAAcC,KAA7B,CAA9B;AACA;;AACD,WAAOG,IAAI,CAACE,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,CAAP;AACA,GAPK,CAAP;AAQA,CATM;AAWP,OAAO,MAAMC,MAAM,GAAG,MAAM;AAC3BN,EAAAA,YAAY,CAACO,UAAb,CAAwB,MAAxB;AACA,CAFM;AAIP,OAAO,MAAMC,QAAQ,GAAG,CAACf,QAAD,EAAWgB,KAAX,EAAkBf,QAAlB,KAA+B;AACtD,SAAOL,KAAK,CAACM,IAAN,CAAWJ,OAAO,GAAG,WAArB,EAAkC;AACxCE,IAAAA,QADwC;AAExCgB,IAAAA,KAFwC;AAGxCf,IAAAA;AAHwC,GAAlC,CAAP;AAKA,CANM;AAQP,OAAO,MAAMgB,QAAQ,GAAG,MAAM;AAC7B,SAAOrB,KAAK,CAACsB,GAAN,CAAUpB,OAAO,GAAG,QAApB,EAA8B;AAAEqB,IAAAA,OAAO,EAAEC,UAAU;AAArB,GAA9B,CAAP;AACA,CAFM;AAIP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC9B,SAAOzB,KAAK,CAACM,IAAN,CAAWJ,OAAO,GAAG,YAArB,EAAmC;AAAEqB,IAAAA,OAAO,EAAEC,UAAU;AAArB,GAAnC,CAAP,CAD8B,CACwC;AACtE,CAFM;AAIP,OAAO,MAAME,UAAU,GAAG,MAAM;AAC/B,SAAO1B,KAAK,CAACM,IAAN,CAAWJ,OAAO,GAAG,OAArB,EAA8B;AAAEqB,IAAAA,OAAO,EAAEC,UAAU;AAArB,GAA9B,CAAP,CAD+B,CACkC;AACjE,CAFM;AAIP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC5B,SAAO3B,KAAK,CAACsB,GAAN,CAAUpB,OAAO,GAAG,OAApB,EAA6B;AAAEqB,IAAAA,OAAO,EAAEC,UAAU;AAArB,GAA7B,CAAP,CAD4B,CACoC;AAChE,CAFM;AAIP,OAAO,MAAMA,UAAU,GAAG,MAAM;AAC9B,QAAMI,IAAI,GAAGf,IAAI,CAACE,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,CAAb;;AAEA,MAAIY,IAAI,IAAIA,IAAI,CAACC,WAAjB,EAA8B;AAC5B,WAAO;AAAEC,MAAAA,aAAa,EAAE,YAAYF,IAAI,CAACC;AAAlC,KAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CARM","sourcesContent":["import axios from \"axios\";\nimport jwt from 'jwt-decode'\n\nconst API_URL = \"http://localhost:8080\";\n\nexport const login = (username, password) => {\n\treturn axios.post(API_URL + \"/authenticate\", { username, password })\n\t\t.then((response) => {\n\t\t\tif (response.data.token) {\n\t\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(jwt(response.data.token)));\n\t\t\t\tlocalStorage.setItem(\"token\", JSON.stringify(response.data.token));\n\t\t\t}\n\t\t\treturn JSON.parse(localStorage.getItem('user'));\n\t\t});\n}\n\nexport const logout = () => {\n\tlocalStorage.removeItem(\"user\");\n}\n\nexport const register = (username, email, password) => {\n\treturn axios.post(API_URL + \"/register\", {\n\t\tusername,\n\t\temail,\n\t\tpassword,\n\t});\n}\n\nexport const getUsers = () => {\n\treturn axios.get(API_URL + '/users', { headers: authHeader() });\n}\n\nexport const makeAdmin = () => {\n\treturn axios.post(API_URL + '/makeAdmin', { headers: authHeader() }); // FIXME: necesita un /id para identificar el usuario\n}\n\nexport const updateUser = () => {\n\treturn axios.post(API_URL + '/user', { headers: authHeader() }); // FIXME: necesita un /id para identificar el usuario\n}\n\nexport const getUser = () => {\n\treturn axios.get(API_URL + '/user', { headers: authHeader() }); // FIXME: necesita un /id para identificar el usuario\n}\n\nexport const authHeader = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { Authorization: 'Bearer ' + user.accessToken };\n  } else {\n    return {};\n  }\n}"]},"metadata":{},"sourceType":"module"}